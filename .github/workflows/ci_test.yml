---
name: GitHub CI

on:
  push:
    branches:
      - master
      - develop
      - primo

  pull_request:
    branches:
      - master
      - develop
      - primo

  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  pytest-host:
    name: Basic `native` configuration
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-18.04', 'windows-latest', 'macos-latest']
        python-version: ['3.7']
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run armory host tests
        shell: bash
        run: |
          pip install -r requirements.txt
          pip install -r test-requirements.txt
          pytest -s ./tests/test_configuration.py
  pytest-native-base:
    name: Native Mode All `Not Slow` Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-18.04', 'windows-latest', 'macos-latest']
        python-version: ['3.7']
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run armory host tests
        shell: bash
        run: |
          pip install -r requirements.txt
          pip install -r test-requirements.txt
          pip install -r armory-base-requirements.txt
          pip install -e .
          pytest -s -k "not slow" -k "not docker_required" ./tests/
  pytest-no-docker:
    name: Test Armory Functionality in `native` (a.k.a. `--no-docker` mode)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ['ubuntu-18.04', 'windows-latest', 'macos-latest']
        python-version: ['3.7']
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run armory host tests
        shell: bash
        run: |
          pip install --user --upgrade pip==22.0.3
          pip install -r armory-base-requirements.txt
          pip install -r test-requirements.txt
          pip install -e .
          pytest -s ./tests/test_no_docker.py
#  pytest-datasets-native:
#    name: Tests Armory Datasets in Native Mode
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: ['ubuntu-18.04', 'windows-latest', 'macos-latest']
#        python-version: ['3.7']
#      fail-fast: false
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Run armory host tests
#        shell: bash
#        run: |
#          pip install --user --upgrade pip==22.0.3
#          pip install -r armory-base-requirements.txt
#          pip install -r test-requirements.txt
#          pip install -e .
#          pytest -s ./tests/test_datasets.py
#  pytest-models-native:
#    name: PyTest Armory Models in Native Mode
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: ['ubuntu-18.04', 'windows-latest', 'macos-latest']
#        python-version: ['3.7']
#      fail-fast: false
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Run armory host tests
#        shell: bash
#        run: |
#          pip install --user --upgrade pip==22.0.3
#          pip install -r armory-base-requirements.txt
#          pip install -r test-requirements.txt
#          pip install -e .
#          pytest -s ./tests/test_models.py
  pytest-docker-base:
    name: Run Tests in docker using `armory-base` image
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Run armory docker tests
        run: |
          pip install -r requirements.txt
          bash docker/build.sh -f base --tag dev --no-cache
          bash docker/build.sh -f tf2 --tag dev --no-cache
          docker run -w /armory-repo twosixarmory/armory-tf2:dev pytest -s -k "not slow" ./tests/
#  pytest-tf1:
#    name: PyTest TF1
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: Run armory TF1 docker tests
#        run: |
#          pip install -r requirements.txt
#          version=$(python -m armory --version)
#          bash docker/build.sh tf1 dev
#          docker run -w /armory_dev twosixarmory/tf1:${version} pytest -s ./tests/test_docker
#          docker run -w /armory_dev twosixarmory/tf1:${version} pytest -s ./tests/test_tf1
#          docker run -w /armory_dev twosixarmory/tf1:${version} python \
#          /opt/conda/lib/python3.7/site-packages/object_detection/builders/model_builder_tf1_test.py
#  armory-tf1-integration-native:
#    name: Run Armory TF1 integration test in `native` mode
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/checkout@v2e
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: Run armory TF1 scenarios
#        run: |
#          pip install -r requirements.txt
#          bash docker/build.sh -f tf2 dev
#          python -m armory run tests/scenarios/tf1/image_classification.json
#  pytest-tf2:
#    name: PyTest TF2
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: Run armory TF2 docker tests
#        run: |
#          pip install -r requirements.txt
#          version=$(python -m armory --version)
#          bash docker/build.sh tf2 dev
#          docker run -w /armory_dev twosixarmory/tf2:${version} pytest -s ./tests/test_docker
#          docker run -w /armory_dev twosixarmory/tf2:${version} python \
#          /opt/conda/lib/python3.7/site-packages/object_detection/builders/model_builder_tf2_test.py
#  pytest-pytorch:
#    name: PyTest PyTorch non-carla
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: Run armory PyTorch docker tests
#        run: |
#          pip install -r requirements.txt
#          version=$(python -m armory --version)
#          bash docker/build.sh pytorch dev
#          docker run -w /armory_dev twosixarmory/pytorch:${version} pytest -s ./tests/test_docker
#          docker run -w /armory_dev twosixarmory/pytorch:${version} pytest -k "not carla" -s ./tests/test_pytorch
#  pytest-pytorch-carla:
#    name: PyTest PyTorch carla
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: Run armory PyTorch docker tests
#        run: |
#          pip install -r requirements.txt
#          version=$(python -m armory --version)
#          bash docker/build.sh pytorch dev
#          docker run -w /armory_dev twosixarmory/pytorch:${version} pytest -k carla -s ./tests/test_pytorch
#  armory-pytorch:
#    name: Armory run tests PyTorch
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: Run armory Pytorch scenarios
#        run: |
#          pip install -r requirements.txt
#          bash docker/build.sh pytorch dev
#          python -m armory run tests/scenarios/pytorch/image_classification.json
#  armory-no-docker:
#    name: Armory test without docker
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/checkout@v2
#      - uses: actions/setup-python@v1
#        with:
#          python-version: '3.7'
#      - name: Run armory test without docker
#        run: |
#          pip install -r requirements.txt
#          version=$(python -m armory --version)
#          bash docker/build.sh tf1 dev
#          docker run -w /armory_dev twosixarmory/tf1:${version} python -m armory \
#          run --no-docker tests/scenarios/tf1/image_classification.json
#          bash docker/build.sh pytorch dev
#          docker run -w /armory_dev twosixarmory/pytorch:${version} python -m armory \
#          run --no-docker tests/scenarios/pytorch/image_classification.json
  flake8-test:
    name: Flake8
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
      - name: install flake8
        run: pip install flake8
      - name: Run flake8
        run: flake8
  black-test:
    name: Black code format
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
      - name: install black
        run: pip install black==19.10b0
      - name: Ensure contributor used ("black ./") before commit
        run: black --check ./
  yamllint-test:
    name: Yamllint
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
      - name: install yamllint
        run: pip install yamllint
      - name: Run yamllint
        run: yamllint --no-warnings ./
  json-format-test:
    name: JSON file format
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
      - name: Ensure contributor used ("python -m tools.format_json") before commit
        run: python -m tools.format_json --check
